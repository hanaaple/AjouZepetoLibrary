fileFormatVersion: 2
guid: feceb02f6a33b364bb3ca81ffa99bc0b
importerOverride: ZEPETO.Script.Compiler:ZEPETO.Script:TypescriptAssetImporter
ScriptedImporter:
  internalIDToNameTable: []
  externalObjects: {}
  serializedVersion: 2
  userData: 
  assetBundleName: 
  assetBundleVariant: 
  script: {fileID: -1123457745, guid: 54cf806323ffe4418a4ce4cc63fe6b9d, type: 3}
  isAssemblyDeclarations: 0
  assembly: 
  generateAllTypes: 1
  types: []
  generateWrapper: 0
  overrideWrapperTypes: 0
  wrapperTypes: []
  WrapperFilters: []
  wrapperOutputDirectory: Generated
  compiledResult: '{"source":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\",
    { value: true });\r\nconst ZEPETO_Script_1 = require(\"ZEPETO.Script\");\r\nclass
    UIGesture extends ZEPETO_Script_1.ZepetoScriptBehaviour {\r\n    constructor()
    {\r\n        super(...arguments);\r\n        this.isInfinite = false;\r\n       
    //   private _officialDownloader: TTETST;\r\n        //   Start() {\r\n       
    //     this.gestureLen = this.gestureButtons.length;\r\n        //     this.poseLen
    = this.poseButtons.length;\r\n        //     this._officialDownloader = this.officialDownloader.GetComponent<TTETST>();\r\n       
    //     ZepetoPlayers.instance.OnAddedLocalPlayer.AddListener(() => {\r\n       
    //       const player = ZepetoPlayers.instance.LocalPlayer.zepetoPlayer;\r\n       
    //       for (var idx = 0; idx < this.gestureButtons.length; idx++) {\r\n       
    //         let clip = this.gestureClips[idx];\r\n        //         // console.log(this.gestureButtons[idx])\r\n       
    //         this.gestureButtons[idx].onClick.AddListener(() => {\r\n        //          
    if (AnimationSynchronizer.instance.GetIsGesturing(player.id)) {\r\n        //            
    AnimationSynchronizer.instance.StopGesture(player);\r\n        //            
    if (\r\n        //               clip !=\r\n        //               AnimationSynchronizer.instance.GetPlayingGesture(player.id)\r\n       
    //             ) {\r\n        //               // this.StopAllCoroutines()\r\n       
    //               AnimationSynchronizer.instance.PlayGesture(\r\n        //                
    clip.name,\r\n        //                 this.isInfinite\r\n        //              
    );\r\n        //               this.StartCoroutine(this.CheckPlayerMove());\r\n       
    //             }\r\n        //           } else {\r\n        //             AnimationSynchronizer.instance.PlayGesture(\r\n       
    //               clip.name,\r\n        //               this.isInfinite\r\n       
    //             );\r\n        //             this.StartCoroutine(this.CheckPlayerMove());\r\n       
    //           }\r\n        //         });\r\n        //       }\r\n        //      
    for (var idx = 0; idx < this.poseButtons.length; idx++) {\r\n        //        
    let poseClip = this.poseClips[idx];\r\n        //         this.poseButtons[idx].onClick.AddListener(()
    => {\r\n        //           if (AnimationSynchronizer.instance.GetIsGesturing(player.id))
    {\r\n        //             AnimationSynchronizer.instance.StopGesture(player);\r\n       
    //             if (\r\n        //               poseClip !=\r\n        //              
    AnimationSynchronizer.instance.GetPlayingGesture(player.id)\r\n        //            
    ) {\r\n        //               // this.StopAllCoroutines()\r\n        //              
    AnimationSynchronizer.instance.PlayGesture(poseClip.name, true);\r\n        //              
    this.StartCoroutine(this.CheckPlayerMove());\r\n        //             }\r\n       
    //           } else {\r\n        //             AnimationSynchronizer.instance.PlayGesture(poseClip.name,
    true);\r\n        //             this.StartCoroutine(this.CheckPlayerMove());\r\n       
    //           }\r\n        //         });\r\n        //       }\r\n        //    
    });\r\n        //     this.infiniteButton.onClick.AddListener(() => {\r\n       
    //       this.isInfinite = !this.isInfinite;\r\n        //       if (!this.isInfinite)
    {\r\n        //         this.infiniteButton.GetComponent<Image>().color = this.defaultColor;\r\n       
    //         this.infiniteButton.colors.normalColor = this.defaultColor;\r\n       
    //         this.infiniteButton.colors.highlightedColor = this.defaultColor;\r\n       
    //         this.infiniteButton.colors.pressedColor = this.GetGrayColor(\r\n       
    //           this.defaultColor\r\n        //         );\r\n        //        
    this.infiniteButton.colors.selectedColor = this.defaultColor;\r\n        //        
    this.infiniteButton.colors.disabledColor = this.GetGrayColor(\r\n        //          
    this.defaultColor\r\n        //         );\r\n        //       } else {\r\n       
    //         this.infiniteButton.GetComponent<Image>().color = this.infiniteColor;\r\n       
    //         this.infiniteButton.colors.normalColor = this.infiniteColor;\r\n       
    //         this.infiniteButton.colors.highlightedColor = this.infiniteColor;\r\n       
    //         this.infiniteButton.colors.pressedColor = this.GetGrayColor(\r\n       
    //           this.infiniteColor\r\n        //         );\r\n        //        
    this.infiniteButton.colors.selectedColor = this.infiniteColor;\r\n        //        
    this.infiniteButton.colors.disabledColor = this.GetGrayColor(\r\n        //          
    this.infiniteColor\r\n        //         );\r\n        //       }\r\n       
    //     });\r\n        //   }\r\n        //   public AddPoseClip(clip: AnimationClip,
    idx: number) {\r\n        //     const prefabBtn = this.poseButtons[0];\r\n       
    //     const poseBtn = GameObject.Instantiate<GameObject>(\r\n        //      
    prefabBtn.gameObject,\r\n        //       prefabBtn.transform.parent\r\n       
    //     ).GetComponent<Button>();\r\n        //     // const indexScript = poseBtn.gameObject.GetComponent<TestButtonIndex>()\r\n       
    //     // indexScript.index = idx\r\n        //     this.poseButtons.push(poseBtn);\r\n       
    //     this.poseClips.push(clip);\r\n        //     clip.wrapMode = WrapMode.Loop;\r\n       
    //     console.log(clip.length);\r\n        //     poseBtn.onClick.AddListener(()
    => {\r\n        //       this._officialDownloader.PoseIndexTest(idx);\r\n       
    //       const player = ZepetoPlayers.instance.LocalPlayer.zepetoPlayer;\r\n       
    //       // this.StartCoroutine(this.StopGesture(player, clip.length))\r\n       
    //       if (AnimationSynchronizer.instance.GetIsGesturing(player.id)) {\r\n       
    //         AnimationSynchronizer.instance.StopGesture(player);\r\n        //        
    if (\r\n        //           clip != AnimationSynchronizer.instance.GetPlayingGesture(player.id)\r\n       
    //         ) {\r\n        //           AnimationSynchronizer.instance.PlayGesture(clip.name,
    true);\r\n        //           this.StartCoroutine(this.CheckPlayerMove());\r\n       
    //         }\r\n        //       } else {\r\n        //         AnimationSynchronizer.instance.PlayGesture(clip.name,
    true);\r\n        //         this.StartCoroutine(this.CheckPlayerMove());\r\n       
    //       }\r\n        //     });\r\n        //   }\r\n        //   public AddGestureClip(clip:
    AnimationClip, idx: number) {\r\n        //     const prefabBtn = this.gestureButtons[0];\r\n       
    //     const gestureBtn = GameObject.Instantiate<GameObject>(\r\n        //      
    prefabBtn.gameObject,\r\n        //       prefabBtn.transform.parent\r\n       
    //     ).GetComponent<Button>();\r\n        //     // const indexScript = gestureBtn.gameObject.GetComponent<TestButtonIndex>()\r\n       
    //     // indexScript.index = idx\r\n        //     this.gestureButtons.push(gestureBtn);\r\n       
    //     this.gestureClips.push(clip);\r\n        //     clip.wrapMode = WrapMode.Loop;\r\n       
    //     gestureBtn.onClick.AddListener(() => {\r\n        //       // this.StopAllCoroutines()\r\n       
    //       // this._officialDownloader.GestureIndexTest(idx)\r\n        //      
    const player = ZepetoPlayers.instance.LocalPlayer.zepetoPlayer;\r\n        //      
    ClientStarter.instance.Debug(clip.length);\r\n        //       console.log(clip.length);\r\n       
    //       // this.StartCoroutine(this.StopGesture(player, clip.length))\r\n       
    //       if (AnimationSynchronizer.instance.GetIsGesturing(player.id)) {\r\n       
    //         AnimationSynchronizer.instance.StopGesture(player);\r\n        //        
    if (\r\n        //           clip != AnimationSynchronizer.instance.GetPlayingGesture(player.id)\r\n       
    //         ) {\r\n        //           AnimationSynchronizer.instance.PlayGesture(\r\n       
    //             clip.name,\r\n        //             this.isInfinite\r\n       
    //           );\r\n        //           this.StartCoroutine(this.CheckPlayerMove());\r\n       
    //         }\r\n        //       } else {\r\n        //         AnimationSynchronizer.instance.PlayGesture(clip.name,
    this.isInfinite);\r\n        //         this.StartCoroutine(this.CheckPlayerMove());\r\n       
    //       }\r\n        //     });\r\n        //   }\r\n        //   public SetGestureThumbnail(sprite:
    Sprite, idx: number) {\r\n        //     // ClientStarter.instance.Debug(sprite)\r\n       
    //     this.gestureButtons[this.gestureLen + idx].GetComponent<Image>().sprite
    =\r\n        //       sprite;\r\n        //     // ClientStarter.instance.Debug(this.gestureButtons[this.gestureLen
    + idx].GetComponent<Image>().sprite)\r\n        //   }\r\n        //   public
    SetPoseThumbnail(sprite: Sprite, idx: number) {\r\n        //     // ClientStarter.instance.Debug(sprite)\r\n       
    //     this.poseButtons[this.poseLen + idx].GetComponent<Image>().sprite = sprite;\r\n       
    //     // ClientStarter.instance.Debug(this.gestureButtons[this.gestureLen +
    idx].GetComponent<Image>().sprite)\r\n        //   }\r\n        //   *StopGesture(player:
    ZepetoPlayer, clipTime: float) {\r\n        //     yield WaitForSecondsCash.instance.WaitForSeconds(clipTime);\r\n       
    //     player.character.CancelGesture();\r\n        //   }\r\n        //   GetGrayColor(color:
    Color): Color {\r\n        //     let c = new Color(color.r - 0.2, color.g -
    0.2, color.b - 0.2, color.a);\r\n        //     return color;\r\n        //  
    }\r\n        //   // *OnUpdate(){\r\n        //   //     while(true){\r\n       
    //   //         console.log(ZepetoPlayers.instance.LocalPlayer.zepetoPlayer.character.tryMove)\r\n       
    //   //         yield null\r\n        //   //     }\r\n        //   // }\r\n       
    //   *CheckPlayerMove() {\r\n        //     while (!ZepetoPlayers.instance.LocalPlayer.zepetoPlayer.character.tryMove)
    {\r\n        //       yield null;\r\n        //     }\r\n        //     AnimationSynchronizer.instance.StopGesture(\r\n       
    //       ZepetoPlayers.instance.LocalPlayer.zepetoPlayer\r\n        //     );\r\n       
    //     // this.StopAllCoroutines()\r\n        //   }\r\n    }\r\n}\r\nexports.default
    = UIGesture;\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVUlHZXN0dXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiVUlHZXN0dXJlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBU0EsaURBQXNEO0FBTXRELE1BQXFCLFNBQVUsU0FBUSxxQ0FBcUI7SUFBNUQ7O1FBS1UsZUFBVSxHQUFZLEtBQUssQ0FBQztRQWFwQyx5Q0FBeUM7UUFFekMsY0FBYztRQUNkLG9EQUFvRDtRQUNwRCw4Q0FBOEM7UUFDOUMsaUZBQWlGO1FBQ2pGLG9FQUFvRTtRQUNwRSx3RUFBd0U7UUFDeEUscUVBQXFFO1FBQ3JFLDZDQUE2QztRQUM3QyxtREFBbUQ7UUFDbkQsK0RBQStEO1FBQy9ELDRFQUE0RTtRQUM1RSxrRUFBa0U7UUFDbEUsbUJBQW1CO1FBQ25CLHdCQUF3QjtRQUN4Qiw0RUFBNEU7UUFDNUUsa0JBQWtCO1FBQ2xCLDRDQUE0QztRQUM1Qyw0REFBNEQ7UUFDNUQsNkJBQTZCO1FBQzdCLGtDQUFrQztRQUNsQyxtQkFBbUI7UUFDbkIsNkRBQTZEO1FBQzdELGdCQUFnQjtRQUNoQixxQkFBcUI7UUFDckIsMERBQTBEO1FBQzFELDJCQUEyQjtRQUMzQixnQ0FBZ0M7UUFDaEMsaUJBQWlCO1FBQ2pCLDJEQUEyRDtRQUMzRCxjQUFjO1FBQ2QsY0FBYztRQUNkLFVBQVU7UUFDVixrRUFBa0U7UUFDbEUsOENBQThDO1FBQzlDLDREQUE0RDtRQUM1RCw0RUFBNEU7UUFDNUUsa0VBQWtFO1FBQ2xFLG1CQUFtQjtRQUNuQiw0QkFBNEI7UUFDNUIsNEVBQTRFO1FBQzVFLGtCQUFrQjtRQUNsQiw0Q0FBNEM7UUFDNUMsaUZBQWlGO1FBQ2pGLDZEQUE2RDtRQUM3RCxnQkFBZ0I7UUFDaEIscUJBQXFCO1FBQ3JCLCtFQUErRTtRQUMvRSwyREFBMkQ7UUFDM0QsY0FBYztRQUNkLGNBQWM7UUFDZCxVQUFVO1FBQ1YsVUFBVTtRQUNWLHNEQUFzRDtRQUN0RCw0Q0FBNEM7UUFDNUMsZ0NBQWdDO1FBQ2hDLCtFQUErRTtRQUMvRSxz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","assetPath":"Assets/Scripts/UIGesture.ts","manifest":{"properties":[{"assembly":"UnityEngine.CoreModule","name":"defaultColor","type":"UnityEngine.Color","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]},{"assembly":"UnityEngine.CoreModule","name":"infiniteColor","type":"UnityEngine.Color","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]},{"assembly":"UnityEngine.UI","name":"infiniteButton","type":"UnityEngine.UI.Button","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]},{"assembly":"UnityEngine.UI","name":"gestureButtons","type":"UnityEngine.UI.Button[]","isArray":true,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]},{"assembly":"UnityEngine.AnimationModule","name":"gestureClips","type":"UnityEngine.AnimationClip[]","isArray":true,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]},{"assembly":"UnityEngine.UI","name":"poseButtons","type":"UnityEngine.UI.Button[]","isArray":true,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]},{"assembly":"UnityEngine.AnimationModule","name":"poseClips","type":"UnityEngine.AnimationClip[]","isArray":true,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]},{"assembly":"UnityEngine.CoreModule","name":"officialDownloader","type":"UnityEngine.GameObject","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]}],"name":"UIGesture","description":""},"isCompiled":true}'
  typescriptHash: c10cac8f7af315c41d90d1f6b462b144
  onlyWriteTrigger: 0
